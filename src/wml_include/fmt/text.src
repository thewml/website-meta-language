##
##  wml::fmt::text - Plain ASCII with Special Formatting Semantic
##  Copyright (c) 1997-2001 Ralf S. Engelschall, All Rights Reserved.
##

#use wml::std::tags

<protect pass=2>
<:
#   the conversion function
sub wml_fmt_text {
    my ($arg) = @_;
    my ($buf);
    local (*FP);

    #   read the txt2html result
    open(FP, '-|', "txt2html $arg->{OPTIONS} --extract $arg->{FILE} < /dev/null");
    local ($/) = undef;
    $buf = <FP>;
    close(FP);

    #   give headlines a more typographically strong look
    if (not $arg->{NOTYPO}) {
        $buf =~ s|^(<A NAME=".+?"><H([1-6])>)(.+?)(</H\2></A>)|$1<font face=\"Arial,Helvetica\">$3</font>$4|isg;
    }

    return $buf;
}
:>
</protect>

<define-tag text endtag=required>
<preserve notypo options />
<set-var notypo=* />
<set-var options=''  />
<set-var %attributes />
<perl>
{
    use Path::Tiny qw/ path tempdir tempfile cwd /;
    my $tmpfile     = tempfile();
    my $notypo = (qq|<get-var notypo />| eq '' ? 1 : 0);
    my $options = q{<get-var options />};

    my $buf;
    <perl:assign:sq $buf>%body</perl:assign:sq>

    #   there is no reason to nest <text> tags, so the <perl:print>
    #   statement is unnecessary
    open(TXT, ">", $tmpfile);
    print TXT $buf;
    close(TXT);

    <perl:print:
         "&wml_fmt_text({ FILE => $tmpfile, NOTYPO => $notypo, OPTIONS => $options })" />

    unlink($tmpfile);
}
</perl>
<restore notypo options />
</define-tag>


##EOF##
__END__

=head1 NAME

wml::fmt::text - Plain ASCII with Special Formatting Semantic

=head1 SYNOPSIS

 #use wml::fmt::text

 <: print &wml_fmt_text({ FILE => $file, OPTIONS => '--xhtml', ...}); :>

 <text notypo>
 FOO
 ===

 1. bar
 2. quux
    a. baz
    b. foo
 ...
 </text>

=head1 DESCRIPTION

The usage is simple: Surround the text with the C<E<lt>textE<gt>> container
tag and then just write plain ASCII text inside it. The corresponding HTML
code is created via F<txt2html>(3), a filter which gives the ASCII
text nice formatting semantic which control the HTML result.

If B<OPTIONS> field is specified, a newer F<txt2html>(1) filter is called
instead of F<wml_aux_txt2html>, which is dead upstream.  This allows for
instance generation of XGTML markup.

The core conversion function is wml_fmt_text() which also can be used by other
include files.

=head1 ATTRIBUTES

These attributes can be used both in the C<E<lt>textE<gt>> tag (in
lowercase letters) and in C<wml_fmt_text> arguments, as shown in
examples above.

=over 4

=item C<NOTYPO>

By default, font commands are added to headings to highlight them.
This attribute prevents alteration of F<wml_aux_txt2html> output.

=item C<OPTIONS=I<str>>

This attribute performs two actions: select F<txt2html> filter instead of
F<wml_aux_txt2html>, and I<str> arguments are passed literally on the
command line of F<txt2html>.

=back

=head1 AUTHOR

 Ralf S. Engelschall
 rse@engelschall.com
 www.engelschall.com

=head1 REQUIRES

 Internal: P1, P2, P3, txt2html (WML)
 External: --

=head1 SEE ALSO

txt2html(1)

=cut

